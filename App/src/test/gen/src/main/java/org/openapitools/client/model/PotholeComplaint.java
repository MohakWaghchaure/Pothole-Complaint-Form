/*
 * Pothole Complaints API
 * This is the API specification which is used for the Serverless Backend Service for the Pothole Complaints Manager
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PotholeComplaint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-19T17:12:39.277225100-07:00[America/Los_Angeles]")
public class PotholeComplaint {
  public static final String SERIALIZED_NAME_STREET_NAME = "streetName";
  @SerializedName(SERIALIZED_NAME_STREET_NAME)
  private String streetName;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_NEARBY_LANDMARK = "nearbyLandmark";
  @SerializedName(SERIALIZED_NAME_NEARBY_LANDMARK)
  private String nearbyLandmark;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_BASE64_IMAGES = "base64Images";
  @SerializedName(SERIALIZED_NAME_BASE64_IMAGES)
  private List<String> base64Images = null;

  public PotholeComplaint() {
  }

  public PotholeComplaint streetName(String streetName) {
    
    this.streetName = streetName;
    return this;
  }

   /**
   * Get streetName
   * @return streetName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStreetName() {
    return streetName;
  }


  public void setStreetName(String streetName) {
    this.streetName = streetName;
  }


  public PotholeComplaint comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public PotholeComplaint latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public PotholeComplaint longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public PotholeComplaint nearbyLandmark(String nearbyLandmark) {
    
    this.nearbyLandmark = nearbyLandmark;
    return this;
  }

   /**
   * Get nearbyLandmark
   * @return nearbyLandmark
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNearbyLandmark() {
    return nearbyLandmark;
  }


  public void setNearbyLandmark(String nearbyLandmark) {
    this.nearbyLandmark = nearbyLandmark;
  }


  public PotholeComplaint status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public PotholeComplaint base64Images(List<String> base64Images) {
    
    this.base64Images = base64Images;
    return this;
  }

  public PotholeComplaint addBase64ImagesItem(String base64ImagesItem) {
    if (this.base64Images == null) {
      this.base64Images = new ArrayList<>();
    }
    this.base64Images.add(base64ImagesItem);
    return this;
  }

   /**
   * Get base64Images
   * @return base64Images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getBase64Images() {
    return base64Images;
  }


  public void setBase64Images(List<String> base64Images) {
    this.base64Images = base64Images;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PotholeComplaint potholeComplaint = (PotholeComplaint) o;
    return Objects.equals(this.streetName, potholeComplaint.streetName) &&
        Objects.equals(this.comments, potholeComplaint.comments) &&
        Objects.equals(this.latitude, potholeComplaint.latitude) &&
        Objects.equals(this.longitude, potholeComplaint.longitude) &&
        Objects.equals(this.nearbyLandmark, potholeComplaint.nearbyLandmark) &&
        Objects.equals(this.status, potholeComplaint.status) &&
        Objects.equals(this.base64Images, potholeComplaint.base64Images);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streetName, comments, latitude, longitude, nearbyLandmark, status, base64Images);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PotholeComplaint {\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    nearbyLandmark: ").append(toIndentedString(nearbyLandmark)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    base64Images: ").append(toIndentedString(base64Images)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("streetName");
    openapiFields.add("comments");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("nearbyLandmark");
    openapiFields.add("status");
    openapiFields.add("base64Images");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("streetName");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PotholeComplaint
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PotholeComplaint.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PotholeComplaint is not found in the empty JSON string", PotholeComplaint.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PotholeComplaint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PotholeComplaint` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PotholeComplaint.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("streetName") != null && !jsonObj.get("streetName").isJsonNull()) && !jsonObj.get("streetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetName").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("nearbyLandmark") != null && !jsonObj.get("nearbyLandmark").isJsonNull()) && !jsonObj.get("nearbyLandmark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nearbyLandmark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nearbyLandmark").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("base64Images") != null && !jsonObj.get("base64Images").isJsonNull()) && !jsonObj.get("base64Images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `base64Images` to be an array in the JSON string but got `%s`", jsonObj.get("base64Images").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PotholeComplaint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PotholeComplaint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PotholeComplaint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PotholeComplaint.class));

       return (TypeAdapter<T>) new TypeAdapter<PotholeComplaint>() {
           @Override
           public void write(JsonWriter out, PotholeComplaint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PotholeComplaint read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PotholeComplaint given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PotholeComplaint
  * @throws IOException if the JSON string is invalid with respect to PotholeComplaint
  */
  public static PotholeComplaint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PotholeComplaint.class);
  }

 /**
  * Convert an instance of PotholeComplaint to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

